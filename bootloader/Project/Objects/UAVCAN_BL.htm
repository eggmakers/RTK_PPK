<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\UAVCAN_BL.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\UAVCAN_BL.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Sat Dec 05 11:05:40 2020
<BR><P>
<H3>Maximum Stack Usage =        780 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
onTransferReceived &rArr; g_handle_param_get_set &rArr; uavcan_protocol_param_GetSetRequest_decode &rArr; uavcan_protocol_param_GetSetRequest_decode_internal &rArr; uavcan_protocol_param_Value_decode_internal &rArr; canardDecodeScalar &rArr; descatterTransferPayload &rArr; copyBitArray
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC_IRQHandler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[1e]">CAN1_RX0_IRQHandler</a> from stm32f4xx_it.o(i.CAN1_RX0_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[1d]">CAN1_TX_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[48]">CAN2_RX0_IRQHandler</a> from stm32f4xx_it.o(i.CAN2_RX0_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[49]">CAN2_RX1_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[4a]">CAN2_SCE_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[47]">CAN2_TX_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[15]">DMA1_Stream0_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[16]">DMA1_Stream1_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[17]">DMA1_Stream2_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[18]">DMA1_Stream3_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream4_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream5_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream6_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[39]">DMA1_Stream7_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[42]">DMA2_Stream0_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[43]">DMA2_Stream1_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[44]">DMA2_Stream2_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[45]">DMA2_Stream3_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[46]">DMA2_Stream4_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[4c]">DMA2_Stream5_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[4d]">DMA2_Stream6_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[4e]">DMA2_Stream7_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[3a]">FMC_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[57]">FPU_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[56]">HASH_RNG_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f4xx_it.o(i.HardFault_Handler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[51]">I2C3_ER_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[50]">I2C3_EV_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[4b]">OTG_FS_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[34]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[53]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[52]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[55]">OTG_HS_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[54]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32f4xx_it.o(i.PendSV_Handler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32f4xx_it.o(i.SVC_Handler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from time.o(i.SysTick_Handler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[59]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f405xx.o(.text)
 <LI><a href="#[c]">TAMP_STAMP_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[23]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[40]">TIM6_DAC_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[36]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[4f]">USART6_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[5a]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f405xx.o(.text)
 <LI><a href="#[5b]">_snputc</a> from printf6.o(i._snputc) referenced from printf6.o(i.__0snprintf$6)
 <LI><a href="#[58]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[5d]">onTransferReceived</a> from uavcan.o(i.onTransferReceived) referenced from uavcan.o(i.uavcan_init)
 <LI><a href="#[5c]">shouldAcceptTransfer</a> from uavcan.o(i.shouldAcceptTransfer) referenced from uavcan.o(i.uavcan_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[5a]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(.text)
</UL>
<P><STRONG><a name="[129]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[5e]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[66]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[12a]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[12b]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[12c]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[12d]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[12e]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_boot_time
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros_isr
</UL>

<P><STRONG><a name="[62]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canardDecodeScalar
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[12f]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[61]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crcAddSignature
</UL>

<P><STRONG><a name="[130]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[fb]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_random_float
</UL>

<P><STRONG><a name="[fa]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_random_float
</UL>

<P><STRONG><a name="[a6]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flash_state
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upgrade_read_request
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_begin_firmware_update
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocation_update
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueueTxFrames
</UL>

<P><STRONG><a name="[df]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createRxState
</UL>

<P><STRONG><a name="[131]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[132]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[133]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[63]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[bb]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_write_to_flash
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canardInit
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canardHandleRxFrame
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_gpio_init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_conf
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createTxItem
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createRxState
</UL>

<P><STRONG><a name="[134]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[65]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[103]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upgrade_read_request
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_node_info_init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_begin_firmware_update
</UL>

<P><STRONG><a name="[100]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_allocation_data_broadcast
</UL>

<P><STRONG><a name="[f4]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_handle_param_get_set
</UL>

<P><STRONG><a name="[135]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[9d]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[5f]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[136]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[137]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[138]"></a>__decompress0</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.CAN1_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = CAN1_RX0_IRQHandler &rArr; HAL_CAN_IRQHandler &rArr; HAL_CAN_RxFifo0MsgPendingCallback &rArr; HAL_CAN_GetRxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_can1_handle
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.CAN2_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = CAN2_RX0_IRQHandler &rArr; HAL_CAN_IRQHandler &rArr; HAL_CAN_RxFifo0MsgPendingCallback &rArr; HAL_CAN_GetRxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_can2_handle
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[b7]"></a>Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_config
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_conf
</UL>

<P><STRONG><a name="[84]"></a>FLASH_Erase_Sector</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, stm32f4xx_hal_flash_ex.o(i.FLASH_Erase_Sector))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_save_param_to_flash
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_erase_param_flash
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[85]"></a>FLASH_FlushCaches</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, stm32f4xx_hal_flash_ex.o(i.FLASH_FlushCaches))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[6a]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f4xx_hal_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetErrorCode
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[b9]"></a>HAL_CAN_ActivateNotification</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_ActivateNotification))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_config
</UL>

<P><STRONG><a name="[d7]"></a>HAL_CAN_AddTxMessage</STRONG> (Thumb, 200 bytes, Stack size 20 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_AddTxMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_CAN_AddTxMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canard_handle_tx
</UL>

<P><STRONG><a name="[b8]"></a>HAL_CAN_ConfigFilter</STRONG> (Thumb, 262 bytes, Stack size 8 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_ConfigFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_CAN_ConfigFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_config
</UL>

<P><STRONG><a name="[79]"></a>HAL_CAN_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[7c]"></a>HAL_CAN_GetRxMessage</STRONG> (Thumb, 232 bytes, Stack size 12 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_GetRxMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_CAN_GetRxMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo0MsgPendingCallback
</UL>

<P><STRONG><a name="[68]"></a>HAL_CAN_IRQHandler</STRONG> (Thumb, 508 bytes, Stack size 40 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = HAL_CAN_IRQHandler &rArr; HAL_CAN_RxFifo0MsgPendingCallback &rArr; HAL_CAN_GetRxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo0MsgPendingCallback
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_WakeUpFromRxMsgCallback
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox2CompleteCallback
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox2AbortCallback
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox1CompleteCallback
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox1AbortCallback
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox0CompleteCallback
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox0AbortCallback
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_SleepCallback
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo1MsgPendingCallback
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo1FullCallback
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo0FullCallback
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX0_IRQHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[7a]"></a>HAL_CAN_Init</STRONG> (Thumb, 282 bytes, Stack size 16 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_CAN_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_config
</UL>

<P><STRONG><a name="[7b]"></a>HAL_CAN_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
</UL>

<P><STRONG><a name="[73]"></a>HAL_CAN_RxFifo0FullCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_RxFifo0FullCallback))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[74]"></a>HAL_CAN_RxFifo0MsgPendingCallback</STRONG> (Thumb, 78 bytes, Stack size 56 bytes, uavcan.o(i.HAL_CAN_RxFifo0MsgPendingCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_CAN_RxFifo0MsgPendingCallback &rArr; HAL_CAN_GetRxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_GetRxMessage
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_frame_push
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[75]"></a>HAL_CAN_RxFifo1FullCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_RxFifo1FullCallback))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[76]"></a>HAL_CAN_RxFifo1MsgPendingCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_RxFifo1MsgPendingCallback))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[77]"></a>HAL_CAN_SleepCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_SleepCallback))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[7e]"></a>HAL_CAN_Start</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_CAN_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_config
</UL>

<P><STRONG><a name="[6e]"></a>HAL_CAN_TxMailbox0AbortCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_TxMailbox0AbortCallback))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[6d]"></a>HAL_CAN_TxMailbox0CompleteCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_TxMailbox0CompleteCallback))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[70]"></a>HAL_CAN_TxMailbox1AbortCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_TxMailbox1AbortCallback))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[6f]"></a>HAL_CAN_TxMailbox1CompleteCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_TxMailbox1CompleteCallback))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[72]"></a>HAL_CAN_TxMailbox2AbortCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_TxMailbox2AbortCallback))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[71]"></a>HAL_CAN_TxMailbox2CompleteCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_TxMailbox2CompleteCallback))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[78]"></a>HAL_CAN_WakeUpFromRxMsgCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_WakeUpFromRxMsgCallback))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[7f]"></a>HAL_DeInit</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jump_to_app
</UL>

<P><STRONG><a name="[81]"></a>HAL_Delay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canard_handle_tx
</UL>

<P><STRONG><a name="[82]"></a>HAL_FLASHEx_Erase</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, stm32f4xx_hal_flash_ex.o(i.HAL_FLASHEx_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase_Sector
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_MassErase
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_FlushCaches
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_page
</UL>

<P><STRONG><a name="[ea]"></a>HAL_FLASH_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.HAL_FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_save_param_to_flash
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_erase_param_flash
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_page
</UL>

<P><STRONG><a name="[86]"></a>HAL_FLASH_Program</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, stm32f4xx_hal_flash.o(i.HAL_FLASH_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_Word
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_HalfWord
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_DoubleWord
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_save_param_to_flash
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
</UL>

<P><STRONG><a name="[e9]"></a>HAL_FLASH_Unlock</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.HAL_FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_save_param_to_flash
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_erase_param_flash
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_page
</UL>

<P><STRONG><a name="[bc]"></a>HAL_GPIO_Init</STRONG> (Thumb, 394 bytes, Stack size 40 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_gpio_init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
</UL>

<P><STRONG><a name="[e8]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_TogglePin))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_write_to_flash
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indicator_task
</UL>

<P><STRONG><a name="[109]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6b]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Start
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableBkUpReg
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_DeInit
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[fc]"></a>HAL_GetUIDw0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_GetUIDw0))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_unique_id
</UL>

<P><STRONG><a name="[fd]"></a>HAL_GetUIDw1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_GetUIDw1))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_unique_id
</UL>

<P><STRONG><a name="[fe]"></a>HAL_GetUIDw2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_GetUIDw2))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_unique_id
</UL>

<P><STRONG><a name="[99]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[8b]"></a>HAL_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>

<P><STRONG><a name="[8d]"></a>HAL_InitTick</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_DeInit
</UL>

<P><STRONG><a name="[80]"></a>HAL_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_MspDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DeInit
</UL>

<P><STRONG><a name="[8e]"></a>HAL_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[bd]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_gpio_init
</UL>

<P><STRONG><a name="[90]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_gpio_init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_conf
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[8c]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[113]"></a>HAL_NVIC_SystemReset</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_handle_node_restart
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_reboot
</UL>

<P><STRONG><a name="[92]"></a>HAL_PWREx_EnableBkUpReg</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stm32f4xx_hal_pwr_ex.o(i.HAL_PWREx_EnableBkUpReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PWREx_EnableBkUpReg
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>

<P><STRONG><a name="[112]"></a>HAL_PWR_EnableBkUpAccess</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal_pwr.o(i.HAL_PWR_EnableBkUpAccess))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>

<P><STRONG><a name="[93]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_conf
</UL>

<P><STRONG><a name="[95]"></a>HAL_RCC_DeInit</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, stm32f4xx_hal_rcc_ex.o(i.HAL_RCC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RCC_DeInit &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jump_to_app
</UL>

<P><STRONG><a name="[db]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_conf
</UL>

<P><STRONG><a name="[b5]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_config
</UL>

<P><STRONG><a name="[94]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[96]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 840 bytes, Stack size 40 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_conf
</UL>

<P><STRONG><a name="[b0]"></a>HAL_RTCEx_BKUPRead</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_rtc_ex.o(i.HAL_RTCEx_BKUPRead))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_update
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_option
</UL>

<P><STRONG><a name="[ad]"></a>HAL_RTCEx_BKUPWrite</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_rtc_ex.o(i.HAL_RTCEx_BKUPWrite))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot
</UL>

<P><STRONG><a name="[dc]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_conf
</UL>

<P><STRONG><a name="[98]"></a>HAL_SYSTICK_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
</UL>

<P><STRONG><a name="[8f]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_conf
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[97]"></a>HAL_SYSTICK_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, time.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Handler &rArr; HAL_SYSTICK_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>SystemInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, system_stm32f4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(.text)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[9a]"></a>__0snprintf$6</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, printf6.o(i.__0snprintf$6), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[139]"></a>__1snprintf$6</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printf6.o(i.__0snprintf$6), UNUSED)

<P><STRONG><a name="[ec]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printf6.o(i.__0snprintf$6))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_load_flash_param
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_save_param_to_flash
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_erase_param_flash
</UL>

<P><STRONG><a name="[13a]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[13b]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[13c]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[9f]"></a>allocation_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, uavcan_allocatee_id.o(i.allocation_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = allocation_init &rArr; allocation_start_request_timer &rArr; get_random_float &rArr; micros &rArr; micros_isr &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocation_start_request_timer
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocation_is_running
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_init
</UL>

<P><STRONG><a name="[a0]"></a>allocation_is_running</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, uavcan_allocatee_id.o(i.allocation_is_running))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = allocation_is_running
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canardGetLocalNodeID
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocation_start_request_timer
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_allocation_data_broadcast
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocation_update
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocation_init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shouldAcceptTransfer
</UL>

<P><STRONG><a name="[a5]"></a>allocation_update</STRONG> (Thumb, 112 bytes, Stack size 48 bytes, uavcan_allocatee_id.o(i.allocation_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = allocation_update &rArr; canardBroadcast &rArr; enqueueTxFrames &rArr; pushTxQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocation_start_request_timer
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canardBroadcast
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocation_is_running
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_task
</UL>

<P><STRONG><a name="[ae]"></a>bl_check_app_exist</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, system.o(i.bl_check_app_exist))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jump_to_app
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot
</UL>

<P><STRONG><a name="[a8]"></a>bl_timeout</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, boot.o(i.bl_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bl_timeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a9]"></a>bl_timeout_reset</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, boot.o(i.bl_timeout_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bl_timeout_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upgrade_read_request
</UL>

<P><STRONG><a name="[aa]"></a>boot</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, boot.o(i.boot))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = boot &rArr; jump_to_app &rArr; HAL_RCC_DeInit &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;was_watchdag_reset
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bl_check_app_exist
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_BKUPWrite
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_option
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jump_to_app
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b4]"></a>can_config</STRONG> (Thumb, 240 bytes, Stack size 72 bytes, can_bus.o(i.can_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = can_config &rArr; compute_can_timings
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Start
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_ConfigFilter
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_ActivateNotification
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_can_timings
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_init
</UL>

<P><STRONG><a name="[ba]"></a>can_gpio_init</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, can_bus.o(i.can_gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = can_gpio_init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_init
</UL>

<P><STRONG><a name="[a7]"></a>canardBroadcast</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, canard.o(i.canardBroadcast))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = canardBroadcast &rArr; enqueueTxFrames &rArr; pushTxQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;incrementTransferID
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueueTxFrames
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crcAddSignature
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crcAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_send_heartbeat
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocation_update
</UL>

<P><STRONG><a name="[c2]"></a>canardCleanupStaleTransfers</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, canard.o(i.canardCleanupStaleTransfers))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = canardCleanupStaleTransfers &rArr; releaseStatePayload
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;releaseStatePayload
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canard_handle_clean
</UL>

<P><STRONG><a name="[c5]"></a>canardDecodeScalar</STRONG> (Thumb, 330 bytes, Stack size 40 bytes, canard.o(i.canardDecodeScalar))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = canardDecodeScalar &rArr; descatterTransferPayload &rArr; copyBitArray
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapByteOrder
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isBigEndian
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;descatterTransferPayload
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_handle_node_restart
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_file_read_response
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_begin_firmware_update
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_allocation_data_broadcast
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_protocol_param_Value_decode_internal
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_protocol_param_GetSetRequest_decode_internal
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_protocol_param_ExecuteOpcodeRequest_decode_internal
</UL>

<P><STRONG><a name="[c9]"></a>canardEncodeScalar</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, canard.o(i.canardEncodeScalar))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = canardEncodeScalar &rArr; copyBitArray
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapByteOrder
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isBigEndian
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyBitArray
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_reboot_respond
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_protocol_NodeStatus_encode
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_protocol_HardwareVersion_encode
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_protocol_GetNodeInfoResponse_encode
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upgrade_read_request
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_protocol_param_Value_encode_internal
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_protocol_param_NumericValue_encode_internal
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_protocol_param_GetSetResponse_encode_internal
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_protocol_param_ExecuteOpcodeResponse_encode_internal
</UL>

<P><STRONG><a name="[a2]"></a>canardGetLocalNodeID</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, canard.o(i.canardGetLocalNodeID))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocation_is_running
</UL>

<P><STRONG><a name="[cb]"></a>canardHandleRxFrame</STRONG> (Thumb, 834 bytes, Stack size 120 bytes, canard.o(i.canardHandleRxFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = canardHandleRxFrame &rArr; createRxState
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canardReleaseRxTransferPayload
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;releaseStatePayload
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepareForNextTransfer
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findRxState
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extractTransferType
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createRxState
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crcAddSignature
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crcAdd
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bufferBlockPushBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_handle_rx
</UL>

<P><STRONG><a name="[d1]"></a>canardInit</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, canard.o(i.canardInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = canardInit
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_init
</UL>

<P><STRONG><a name="[d6]"></a>canardPeekTxQueue</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, canard.o(i.canardPeekTxQueue))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canard_handle_tx
</UL>

<P><STRONG><a name="[d2]"></a>canardPopTxQueue</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, canard.o(i.canardPopTxQueue))
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canard_handle_tx
</UL>

<P><STRONG><a name="[d0]"></a>canardReleaseRxTransferPayload</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, canard.o(i.canardReleaseRxTransferPayload))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = canardReleaseRxTransferPayload
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canardHandleRxFrame
</UL>

<P><STRONG><a name="[d3]"></a>canardRequestOrRespond</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, canard.o(i.canardRequestOrRespond))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = canardRequestOrRespond &rArr; enqueueTxFrames &rArr; pushTxQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;incrementTransferID
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueueTxFrames
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crcAddSignature
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crcAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_reboot_respond
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upgrade_read_request
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_get_node_info_respond
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_begin_firmware_update
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_handle_param_get_set
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_handle_param_execute
</UL>

<P><STRONG><a name="[101]"></a>canardSetLocalNodeID</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, canard.o(i.canardSetLocalNodeID))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_allocation_data_broadcast
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_init
</UL>

<P><STRONG><a name="[b1]"></a>check_update</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, boot.o(i.check_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = check_update
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_BKUPRead
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_can_node_id
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_can_baudrate
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_option
</UL>

<P><STRONG><a name="[e2]"></a>file_write_to_flash</STRONG> (Thumb, 228 bytes, Stack size 56 bytes, read_write.o(i.file_write_to_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = file_write_to_flash &rArr; flash_erase_page &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sector
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jump_to_app
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_reboot
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_crc32_calculate
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_page
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_file_read_response
</UL>

<P><STRONG><a name="[e4]"></a>flash_erase_page</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, flash.o(i.flash_erase_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = flash_erase_page &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_write_to_flash
</UL>

<P><STRONG><a name="[e5]"></a>flash_write</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, flash.o(i.flash_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = flash_write &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_write_to_flash
</UL>

<P><STRONG><a name="[eb]"></a>g_erase_param_flash</STRONG> (Thumb, 60 bytes, Stack size 96 bytes, param.o(i.g_erase_param_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = g_erase_param_flash &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_log
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase_Sector
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_handle_param_execute
</UL>

<P><STRONG><a name="[ee]"></a>g_handle_param_execute</STRONG> (Thumb, 122 bytes, Stack size 80 bytes, param.o(i.g_handle_param_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = g_handle_param_execute &rArr; uavcan_protocol_param_ExecuteOpcodeRequest_decode &rArr; uavcan_protocol_param_ExecuteOpcodeRequest_decode_internal &rArr; canardDecodeScalar &rArr; descatterTransferPayload &rArr; copyBitArray
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canardRequestOrRespond
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_save_param_to_flash
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_erase_param_flash
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_protocol_param_ExecuteOpcodeResponse_encode
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_protocol_param_ExecuteOpcodeRequest_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onTransferReceived
</UL>

<P><STRONG><a name="[f2]"></a>g_handle_param_get_set</STRONG> (Thumb, 274 bytes, Stack size 528 bytes, param.o(i.g_handle_param_get_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 780<LI>Call Chain = g_handle_param_get_set &rArr; uavcan_protocol_param_GetSetRequest_decode &rArr; uavcan_protocol_param_GetSetRequest_decode_internal &rArr; uavcan_protocol_param_Value_decode_internal &rArr; canardDecodeScalar &rArr; descatterTransferPayload &rArr; copyBitArray
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canardRequestOrRespond
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_protocol_param_GetSetResponse_encode
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_protocol_param_GetSetRequest_decode
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onTransferReceived
</UL>

<P><STRONG><a name="[f6]"></a>g_load_flash_param</STRONG> (Thumb, 114 bytes, Stack size 112 bytes, param.o(i.g_load_flash_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = g_load_flash_param &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_log
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_param
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_init
</UL>

<P><STRONG><a name="[f0]"></a>g_save_param_to_flash</STRONG> (Thumb, 336 bytes, Stack size 128 bytes, param.o(i.g_save_param_to_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = g_save_param_to_flash &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_log
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase_Sector
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_handle_param_execute
</UL>

<P><STRONG><a name="[67]"></a>get_can1_handle</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, can_bus.o(i.get_can1_handle))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canard_handle_tx
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[69]"></a>get_can2_handle</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, can_bus.o(i.get_can2_handle))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canard_handle_tx
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX0_IRQHandler
</UL>

<P><STRONG><a name="[11b]"></a>get_can_node_id</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, info.o(i.get_can_node_id))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_init
</UL>

<P><STRONG><a name="[e3]"></a>get_sector</STRONG> (Thumb, 154 bytes, Stack size 0 bytes, flash.o(i.get_sector))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_write_to_flash
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flash_state
</UL>

<P><STRONG><a name="[f8]"></a>get_unique_id</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, system.o(i.get_unique_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_unique_id
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetUIDw2
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetUIDw1
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetUIDw0
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_random_float
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_node_info_init
</UL>

<P><STRONG><a name="[ff]"></a>handle_allocation_data_broadcast</STRONG> (Thumb, 182 bytes, Stack size 72 bytes, uavcan_allocatee_id.o(i.handle_allocation_data_broadcast))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = handle_allocation_data_broadcast &rArr; canardDecodeScalar &rArr; descatterTransferPayload &rArr; copyBitArray
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_random_float
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocation_start_request_timer
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canardDecodeScalar
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canardSetLocalNodeID
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocation_is_running
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onTransferReceived
</UL>

<P><STRONG><a name="[102]"></a>handle_begin_firmware_update</STRONG> (Thumb, 158 bytes, Stack size 392 bytes, uavcan_file_read.o(i.handle_begin_firmware_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = handle_begin_firmware_update &rArr; canardRequestOrRespond &rArr; enqueueTxFrames &rArr; pushTxQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flash_state
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canardDecodeScalar
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canardRequestOrRespond
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onTransferReceived
</UL>

<P><STRONG><a name="[105]"></a>handle_file_read_response</STRONG> (Thumb, 120 bytes, Stack size 296 bytes, uavcan_file_read.o(i.handle_file_read_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = handle_file_read_response &rArr; file_write_to_flash &rArr; flash_erase_page &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_write_to_flash
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canardDecodeScalar
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onTransferReceived
</UL>

<P><STRONG><a name="[106]"></a>indicator</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, light.o(i.indicator))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = indicator &rArr; led_init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[108]"></a>indicator_task</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, light.o(i.indicator_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = indicator_task
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[af]"></a>jump_to_app</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, system.o(i.jump_to_app))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = jump_to_app &rArr; HAL_RCC_DeInit &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bl_check_app_exist
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DeInit
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_write_to_flash
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[107]"></a>led_init</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, led.o(i.led_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = led_init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indicator
</UL>

<P><STRONG><a name="[58]"></a>main</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = main &rArr; uavcan_task &rArr; upgrade_read_request &rArr; canardRequestOrRespond &rArr; enqueueTxFrames &rArr; pushTxQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_task
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jump_to_app
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indicator_task
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indicator
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bl_timeout
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[f9]"></a>micros</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, time.o(i.micros))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = micros &rArr; micros_isr &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros_isr
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_random_float
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_boot_time
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_handle_rx
</UL>

<P><STRONG><a name="[a3]"></a>millis</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, time.o(i.millis))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flash_state
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocation_start_request_timer
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upgrade_read_request
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_send_heartbeat
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_allocation_data_broadcast
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocation_update
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canard_handle_clean
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bl_timeout_reset
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indicator_task
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bl_timeout
</UL>

<P><STRONG><a name="[d9]"></a>set_can_baudrate</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, info.o(i.set_can_baudrate))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_update
</UL>

<P><STRONG><a name="[d8]"></a>set_can_node_id</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, info.o(i.set_can_node_id))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_update
</UL>

<P><STRONG><a name="[104]"></a>set_flash_state</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, uavcan_file_read.o(i.set_flash_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = set_flash_state
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sector
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_begin_firmware_update
</UL>

<P><STRONG><a name="[e6]"></a>sw_crc32_calculate</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, sw_crc.o(i.sw_crc32_calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sw_crc32_calculate
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_write_to_flash
</UL>

<P><STRONG><a name="[110]"></a>sys_boot_time</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, time.o(i.sys_boot_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = sys_boot_time &rArr; micros &rArr; micros_isr &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_send_heartbeat
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_node_status_init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_init
</UL>

<P><STRONG><a name="[10a]"></a>sys_init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, system.o(i.sys_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = sys_init &rArr; clk_conf &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnableBkUpAccess
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableBkUpReg
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_conf
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e7]"></a>system_reboot</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, system.o(i.system_reboot))
<BR><BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SystemReset
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_write_to_flash
</UL>

<P><STRONG><a name="[111]"></a>time_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, time.o(i.time_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = time_init &rArr; sys_boot_time &rArr; micros &rArr; micros_isr &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_boot_time
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>

<P><STRONG><a name="[10f]"></a>uavcan_get_node_info_respond</STRONG> (Thumb, 72 bytes, Stack size 416 bytes, uavcan_get_node_info.o(i.uavcan_get_node_info_respond))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = uavcan_get_node_info_respond &rArr; canardRequestOrRespond &rArr; enqueueTxFrames &rArr; pushTxQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_get_node_status
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canardRequestOrRespond
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_protocol_GetNodeInfoResponse_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onTransferReceived
</UL>

<P><STRONG><a name="[114]"></a>uavcan_get_node_status</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uavcan_node_status.o(i.uavcan_get_node_status))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_node_info_init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_get_node_info_respond
</UL>

<P><STRONG><a name="[10e]"></a>uavcan_handle_node_restart</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, uavcan_reboot.o(i.uavcan_handle_node_restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = uavcan_handle_node_restart &rArr; uavcan_reboot_respond &rArr; canardRequestOrRespond &rArr; enqueueTxFrames &rArr; pushTxQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SystemReset
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_reboot_respond
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canardDecodeScalar
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onTransferReceived
</UL>

<P><STRONG><a name="[117]"></a>uavcan_handle_rx</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, uavcan.o(i.uavcan_handle_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = uavcan_handle_rx &rArr; canardHandleRxFrame &rArr; createRxState
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canardHandleRxFrame
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_framne_pop
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_task
</UL>

<P><STRONG><a name="[10b]"></a>uavcan_init</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, uavcan.o(i.uavcan_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = uavcan_init &rArr; g_load_flash_param &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_node_status_init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_node_info_init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_load_flash_param
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canardSetLocalNodeID
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canardInit
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_gpio_init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_config
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocation_init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_can_node_id
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ed]"></a>uavcan_log</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, log.o(i.uavcan_log))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_load_flash_param
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_save_param_to_flash
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_erase_param_flash
</UL>

<P><STRONG><a name="[11a]"></a>uavcan_node_info_init</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, uavcan_get_node_info.o(i.uavcan_node_info_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uavcan_node_info_init &rArr; get_unique_id
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_get_node_status
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_unique_id
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_init
</UL>

<P><STRONG><a name="[119]"></a>uavcan_node_status_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, uavcan_node_status.o(i.uavcan_node_status_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = uavcan_node_status_init &rArr; sys_boot_time &rArr; micros &rArr; micros_isr &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_boot_time
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_init
</UL>

<P><STRONG><a name="[11c]"></a>uavcan_protocol_NodeStatus_encode</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, uavcan_node_status.o(i.uavcan_protocol_NodeStatus_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = uavcan_protocol_NodeStatus_encode &rArr; canardEncodeScalar &rArr; copyBitArray
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canardEncodeScalar
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_protocol_GetNodeInfoResponse_encode
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_send_heartbeat
</UL>

<P><STRONG><a name="[126]"></a>uavcan_protocol_param_Empty_decode_internal</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, param_empty.o(i.uavcan_protocol_param_Empty_decode_internal))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_protocol_param_Value_decode_internal
</UL>

<P><STRONG><a name="[125]"></a>uavcan_protocol_param_Empty_encode_internal</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, param_empty.o(i.uavcan_protocol_param_Empty_encode_internal))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_protocol_param_Value_encode_internal
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_protocol_param_NumericValue_encode_internal
</UL>

<P><STRONG><a name="[ef]"></a>uavcan_protocol_param_ExecuteOpcodeRequest_decode</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, param_executeopcode.o(i.uavcan_protocol_param_ExecuteOpcodeRequest_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = uavcan_protocol_param_ExecuteOpcodeRequest_decode &rArr; uavcan_protocol_param_ExecuteOpcodeRequest_decode_internal &rArr; canardDecodeScalar &rArr; descatterTransferPayload &rArr; copyBitArray
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_protocol_param_ExecuteOpcodeRequest_decode_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_handle_param_execute
</UL>

<P><STRONG><a name="[11e]"></a>uavcan_protocol_param_ExecuteOpcodeRequest_decode_internal</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, param_executeopcode.o(i.uavcan_protocol_param_ExecuteOpcodeRequest_decode_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = uavcan_protocol_param_ExecuteOpcodeRequest_decode_internal &rArr; canardDecodeScalar &rArr; descatterTransferPayload &rArr; copyBitArray
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canardDecodeScalar
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_protocol_param_ExecuteOpcodeRequest_decode
</UL>

<P><STRONG><a name="[f1]"></a>uavcan_protocol_param_ExecuteOpcodeResponse_encode</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, param_executeopcode.o(i.uavcan_protocol_param_ExecuteOpcodeResponse_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = uavcan_protocol_param_ExecuteOpcodeResponse_encode &rArr; uavcan_protocol_param_ExecuteOpcodeResponse_encode_internal &rArr; canardEncodeScalar &rArr; copyBitArray
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_protocol_param_ExecuteOpcodeResponse_encode_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_handle_param_execute
</UL>

<P><STRONG><a name="[11f]"></a>uavcan_protocol_param_ExecuteOpcodeResponse_encode_internal</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, param_executeopcode.o(i.uavcan_protocol_param_ExecuteOpcodeResponse_encode_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = uavcan_protocol_param_ExecuteOpcodeResponse_encode_internal &rArr; canardEncodeScalar &rArr; copyBitArray
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canardEncodeScalar
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_protocol_param_ExecuteOpcodeResponse_encode
</UL>

<P><STRONG><a name="[f3]"></a>uavcan_protocol_param_GetSetRequest_decode</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, param_getset.o(i.uavcan_protocol_param_GetSetRequest_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = uavcan_protocol_param_GetSetRequest_decode &rArr; uavcan_protocol_param_GetSetRequest_decode_internal &rArr; uavcan_protocol_param_Value_decode_internal &rArr; canardDecodeScalar &rArr; descatterTransferPayload &rArr; copyBitArray
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_protocol_param_GetSetRequest_decode_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_handle_param_get_set
</UL>

<P><STRONG><a name="[120]"></a>uavcan_protocol_param_GetSetRequest_decode_internal</STRONG> (Thumb, 176 bytes, Stack size 48 bytes, param_getset.o(i.uavcan_protocol_param_GetSetRequest_decode_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = uavcan_protocol_param_GetSetRequest_decode_internal &rArr; uavcan_protocol_param_Value_decode_internal &rArr; canardDecodeScalar &rArr; descatterTransferPayload &rArr; copyBitArray
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canardDecodeScalar
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_protocol_param_Value_decode_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_protocol_param_GetSetRequest_decode
</UL>

<P><STRONG><a name="[f5]"></a>uavcan_protocol_param_GetSetResponse_encode</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, param_getset.o(i.uavcan_protocol_param_GetSetResponse_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = uavcan_protocol_param_GetSetResponse_encode &rArr; uavcan_protocol_param_GetSetResponse_encode_internal &rArr; uavcan_protocol_param_Value_encode_internal &rArr; canardEncodeScalar &rArr; copyBitArray
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_protocol_param_GetSetResponse_encode_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_handle_param_get_set
</UL>

<P><STRONG><a name="[122]"></a>uavcan_protocol_param_GetSetResponse_encode_internal</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, param_getset.o(i.uavcan_protocol_param_GetSetResponse_encode_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = uavcan_protocol_param_GetSetResponse_encode_internal &rArr; uavcan_protocol_param_Value_encode_internal &rArr; canardEncodeScalar &rArr; copyBitArray
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canardEncodeScalar
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_protocol_param_Value_encode_internal
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_protocol_param_NumericValue_encode_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_protocol_param_GetSetResponse_encode
</UL>

<P><STRONG><a name="[124]"></a>uavcan_protocol_param_NumericValue_encode_internal</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, param_numericvalue.o(i.uavcan_protocol_param_NumericValue_encode_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = uavcan_protocol_param_NumericValue_encode_internal &rArr; canardEncodeScalar &rArr; copyBitArray
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canardEncodeScalar
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_protocol_param_Empty_encode_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_protocol_param_GetSetResponse_encode_internal
</UL>

<P><STRONG><a name="[121]"></a>uavcan_protocol_param_Value_decode_internal</STRONG> (Thumb, 260 bytes, Stack size 40 bytes, param_value.o(i.uavcan_protocol_param_Value_decode_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = uavcan_protocol_param_Value_decode_internal &rArr; canardDecodeScalar &rArr; descatterTransferPayload &rArr; copyBitArray
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canardDecodeScalar
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_protocol_param_Empty_decode_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_protocol_param_GetSetRequest_decode_internal
</UL>

<P><STRONG><a name="[123]"></a>uavcan_protocol_param_Value_encode_internal</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, param_value.o(i.uavcan_protocol_param_Value_encode_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = uavcan_protocol_param_Value_encode_internal &rArr; canardEncodeScalar &rArr; copyBitArray
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canardEncodeScalar
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_protocol_param_Empty_encode_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_protocol_param_GetSetResponse_encode_internal
</UL>

<P><STRONG><a name="[127]"></a>uavcan_send_heartbeat</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, uavcan_node_status.o(i.uavcan_send_heartbeat))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = uavcan_send_heartbeat &rArr; canardBroadcast &rArr; enqueueTxFrames &rArr; pushTxQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_boot_time
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canardBroadcast
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_protocol_NodeStatus_encode
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_task
</UL>

<P><STRONG><a name="[10c]"></a>uavcan_task</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, uavcan.o(i.uavcan_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = uavcan_task &rArr; upgrade_read_request &rArr; canardRequestOrRespond &rArr; enqueueTxFrames &rArr; pushTxQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upgrade_read_request
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_send_heartbeat
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocation_update
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_handle_rx
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canard_handle_tx
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canard_handle_clean
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[128]"></a>upgrade_read_request</STRONG> (Thumb, 162 bytes, Stack size 200 bytes, uavcan_file_read.o(i.upgrade_read_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = upgrade_read_request &rArr; canardRequestOrRespond &rArr; enqueueTxFrames &rArr; pushTxQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canardRequestOrRespond
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canardEncodeScalar
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bl_timeout_reset
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_task
</UL>

<P><STRONG><a name="[ab]"></a>was_watchdag_reset</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, watchdog.o(i.was_watchdag_reset))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[ac]"></a>boot_option</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, boot.o(i.boot_option))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = boot_option &rArr; check_update
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_BKUPRead
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_update
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot
</UL>

<P><STRONG><a name="[d4]"></a>canard_handle_clean</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, uavcan.o(i.canard_handle_clean))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = canard_handle_clean &rArr; canardCleanupStaleTransfers &rArr; releaseStatePayload
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canardCleanupStaleTransfers
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_task
</UL>

<P><STRONG><a name="[d5]"></a>canard_handle_tx</STRONG> (Thumb, 176 bytes, Stack size 56 bytes, uavcan.o(i.canard_handle_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = canard_handle_tx &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canardPopTxQueue
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canardPeekTxQueue
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_AddTxMessage
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_can2_handle
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_can1_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_task
</UL>

<P><STRONG><a name="[5d]"></a>onTransferReceived</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, uavcan.o(i.onTransferReceived))
<BR><BR>[Stack]<UL><LI>Max Depth = 780<LI>Call Chain = onTransferReceived &rArr; g_handle_param_get_set &rArr; uavcan_protocol_param_GetSetRequest_decode &rArr; uavcan_protocol_param_GetSetRequest_decode_internal &rArr; uavcan_protocol_param_Value_decode_internal &rArr; canardDecodeScalar &rArr; descatterTransferPayload &rArr; copyBitArray
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_handle_node_restart
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_get_node_info_respond
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_file_read_response
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_begin_firmware_update
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_allocation_data_broadcast
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_handle_param_get_set
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_handle_param_execute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uavcan.o(i.uavcan_init)
</UL>
<P><STRONG><a name="[5c]"></a>shouldAcceptTransfer</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, uavcan.o(i.shouldAcceptTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = shouldAcceptTransfer &rArr; allocation_is_running
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocation_is_running
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uavcan.o(i.uavcan_init)
</UL>
<P><STRONG><a name="[7d]"></a>uavcan_frame_push</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, uavcan.o(i.uavcan_frame_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = uavcan_frame_push
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo0MsgPendingCallback
</UL>

<P><STRONG><a name="[118]"></a>uavcan_framne_pop</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, uavcan.o(i.uavcan_framne_pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uavcan_framne_pop
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_handle_rx
</UL>

<P><STRONG><a name="[115]"></a>uavcan_protocol_GetNodeInfoResponse_encode</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, uavcan_get_node_info.o(i.uavcan_protocol_GetNodeInfoResponse_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = uavcan_protocol_GetNodeInfoResponse_encode &rArr; uavcan_protocol_HardwareVersion_encode &rArr; canardEncodeScalar &rArr; copyBitArray
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_protocol_NodeStatus_encode
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canardEncodeScalar
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_protocol_HardwareVersion_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_get_node_info_respond
</UL>

<P><STRONG><a name="[11d]"></a>uavcan_protocol_HardwareVersion_encode</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, uavcan_get_node_info.o(i.uavcan_protocol_HardwareVersion_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = uavcan_protocol_HardwareVersion_encode &rArr; canardEncodeScalar &rArr; copyBitArray
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canardEncodeScalar
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_protocol_GetNodeInfoResponse_encode
</UL>

<P><STRONG><a name="[116]"></a>uavcan_reboot_respond</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, uavcan_reboot.o(i.uavcan_reboot_respond))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = uavcan_reboot_respond &rArr; canardRequestOrRespond &rArr; enqueueTxFrames &rArr; pushTxQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canardRequestOrRespond
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canardEncodeScalar
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uavcan_handle_node_restart
</UL>

<P><STRONG><a name="[a1]"></a>allocation_start_request_timer</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, uavcan_allocatee_id.o(i.allocation_start_request_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = allocation_start_request_timer &rArr; get_random_float &rArr; micros &rArr; micros_isr &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_random_float
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocation_is_running
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_allocation_data_broadcast
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocation_update
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocation_init
</UL>

<P><STRONG><a name="[a4]"></a>get_random_float</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, uavcan_allocatee_id.o(i.get_random_float))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = get_random_float &rArr; micros &rArr; micros_isr &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_unique_id
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocation_start_request_timer
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_allocation_data_broadcast
</UL>

<P><STRONG><a name="[da]"></a>clk_conf</STRONG> (Thumb, 170 bytes, Stack size 88 bytes, system.o(i.clk_conf))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = clk_conf &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>

<P><STRONG><a name="[10d]"></a>micros_isr</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, time.o(i.micros_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = micros_isr &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros
</UL>

<P><STRONG><a name="[b6]"></a>compute_can_timings</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, can_bus.o(i.compute_can_timings))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = compute_can_timings
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_config
</UL>

<P><STRONG><a name="[f7]"></a>init_param</STRONG> (Thumb, 122 bytes, Stack size 12 bytes, param.o(i.init_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = init_param
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_load_flash_param
</UL>

<P><STRONG><a name="[91]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[88]"></a>FLASH_Program_Byte</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.FLASH_Program_Byte))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[87]"></a>FLASH_Program_DoubleWord</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f4xx_hal_flash.o(i.FLASH_Program_DoubleWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_Program_DoubleWord
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[89]"></a>FLASH_Program_HalfWord</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.FLASH_Program_HalfWord))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[8a]"></a>FLASH_Program_Word</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.FLASH_Program_Word))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[6c]"></a>FLASH_SetErrorCode</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.FLASH_SetErrorCode))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[83]"></a>FLASH_MassErase</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_hal_flash_ex.o(i.FLASH_MassErase))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[de]"></a>allocateBlock</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, canard.o(i.allocateBlock))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createTxItem
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createRxState
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createBufferBlock
</UL>

<P><STRONG><a name="[b2]"></a>bufferBlockPushBytes</STRONG> (Thumb, 230 bytes, Stack size 40 bytes, canard.o(i.bufferBlockPushBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bufferBlockPushBytes &rArr; createBufferBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createBufferBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canardHandleRxFrame
</UL>

<P><STRONG><a name="[ca]"></a>copyBitArray</STRONG> (Thumb, 112 bytes, Stack size 20 bytes, canard.o(i.copyBitArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = copyBitArray
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canardEncodeScalar
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;descatterTransferPayload
</UL>

<P><STRONG><a name="[bf]"></a>crcAdd</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, canard.o(i.crcAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = crcAdd &rArr; crcAddByte
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crcAddByte
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canardBroadcast
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canardRequestOrRespond
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canardHandleRxFrame
</UL>

<P><STRONG><a name="[dd]"></a>crcAddByte</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, canard.o(i.crcAddByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = crcAddByte
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crcAddSignature
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crcAdd
</UL>

<P><STRONG><a name="[be]"></a>crcAddSignature</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, canard.o(i.crcAddSignature))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = crcAddSignature &rArr; crcAddByte
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crcAddByte
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canardBroadcast
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canardRequestOrRespond
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canardHandleRxFrame
</UL>

<P><STRONG><a name="[b3]"></a>createBufferBlock</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, canard.o(i.createBufferBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = createBufferBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocateBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bufferBlockPushBytes
</UL>

<P><STRONG><a name="[ce]"></a>createRxState</STRONG> (Thumb, 46 bytes, Stack size 48 bytes, canard.o(i.createRxState))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = createRxState
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocateBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canardHandleRxFrame
</UL>

<P><STRONG><a name="[e0]"></a>createTxItem</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, canard.o(i.createTxItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = createTxItem
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocateBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueueTxFrames
</UL>

<P><STRONG><a name="[c6]"></a>descatterTransferPayload</STRONG> (Thumb, 246 bytes, Stack size 64 bytes, canard.o(i.descatterTransferPayload))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = descatterTransferPayload &rArr; copyBitArray
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyBitArray
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canardDecodeScalar
</UL>

<P><STRONG><a name="[c0]"></a>enqueueTxFrames</STRONG> (Thumb, 238 bytes, Stack size 56 bytes, canard.o(i.enqueueTxFrames))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = enqueueTxFrames &rArr; pushTxQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushTxQueue
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createTxItem
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canardBroadcast
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canardRequestOrRespond
</UL>

<P><STRONG><a name="[cc]"></a>extractTransferType</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, canard.o(i.extractTransferType))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canardHandleRxFrame
</UL>

<P><STRONG><a name="[cd]"></a>findRxState</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, canard.o(i.findRxState))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canardHandleRxFrame
</UL>

<P><STRONG><a name="[c4]"></a>freeBlock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, canard.o(i.freeBlock))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canardPopTxQueue
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canardCleanupStaleTransfers
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canardReleaseRxTransferPayload
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;releaseStatePayload
</UL>

<P><STRONG><a name="[c1]"></a>incrementTransferID</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, canard.o(i.incrementTransferID))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canardBroadcast
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canardRequestOrRespond
</UL>

<P><STRONG><a name="[c7]"></a>isBigEndian</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, canard.o(i.isBigEndian))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canardDecodeScalar
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canardEncodeScalar
</UL>

<P><STRONG><a name="[cf]"></a>prepareForNextTransfer</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, canard.o(i.prepareForNextTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canardHandleRxFrame
</UL>

<P><STRONG><a name="[e1]"></a>pushTxQueue</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, canard.o(i.pushTxQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pushTxQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueueTxFrames
</UL>

<P><STRONG><a name="[c3]"></a>releaseStatePayload</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, canard.o(i.releaseStatePayload))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = releaseStatePayload
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canardHandleRxFrame
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canardCleanupStaleTransfers
</UL>

<P><STRONG><a name="[c8]"></a>swapByteOrder</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, canard.o(i.swapByteOrder))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = swapByteOrder
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canardDecodeScalar
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canardEncodeScalar
</UL>

<P><STRONG><a name="[9b]"></a>_printf_core</STRONG> (Thumb, 748 bytes, Stack size 96 bytes, printf6.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf$6
</UL>

<P><STRONG><a name="[9e]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf6.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[9c]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf6.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[5b]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printf6.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printf6.o(i.__0snprintf$6)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
