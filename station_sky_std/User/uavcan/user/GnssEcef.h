/*
 * UAVCAN data structure definition for libcanard.
 *
 * Autogenerated, do not edit.
 *
 * Source file: H:\20190426\001\dsdl_compiler\mmc\20067.GnssEcef.uavcan
 */

#ifndef __MMC_GNSSECEF
#define __MMC_GNSSECEF

#include "gnss.h"
#include <stdint.h>
#include "canard.h"

#ifdef __cplusplus
extern "C"
{
#endif

#include <Timestamp.h>

/******************************* Source text **********************************
# payload bit len = 32 + 8*2 + 64*3 + 32*11 + 8*8 + 54 = 710

# id

uint32 devid

# gnss mode and fix type (see "gps/definitions.h" for detail)

uint8 mode
uint8 fix_type

# ECEF

float64[3] ecef_pos			# ECEF coordinates in m (note: use type double for not loss of precision)
float32[3] ecef_vel			# ECEF velocity in m/s
float32[3] ecef_pos_std		# Position standard deviation in m
float32[3] ecef_vel_std		# Velocity standard deviation in m/s

# heading

float32 heading				# Angle start from module's head in degree (CW is positive)
float32 heading_std			# Angle standard deviation in degree

# satellite

uint8 pos_sat				# position/velocity satellite
uint8 head_sat				# heading satellite

# RTK solution status
# constants is defined in gps devices submodule's "novatel.h"

uint8 pos_type
uint8 pos_sol
uint8 vel_type
uint8 vel_sol
uint8 head_type
uint8 head_sol

uint16 hdop
uint16 vdop

# UTC microsecond

uavcan.Timestamp utc
******************************************************************************/

/********************* DSDL signature source definition ***********************
mmc.GnssEcef
saturated uint32 devid
saturated uint8 mode
saturated uint8 fix_type
saturated float64[3] ecef_pos
saturated float32[3] ecef_vel
saturated float32[3] ecef_pos_std
saturated float32[3] ecef_vel_std
saturated float32 heading
saturated float32 heading_std
saturated uint8 pos_sat
saturated uint8 head_sat
saturated uint8 pos_type
saturated uint8 pos_sol
saturated uint8 vel_type
saturated uint8 vel_sol
saturated uint8 head_type
saturated uint8 head_sol
saturated uint16 hdop
saturated uint16 vdop
uavcan.Timestamp utc
******************************************************************************/

#define MMC_GNSSECEF_ID                                    20067
#define MMC_GNSSECEF_NAME                                  "mmc.GnssEcef"
#define MMC_GNSSECEF_SIGNATURE                             (0x447F90CA2E933125ULL)

#define MMC_GNSSECEF_MAX_SIZE                              ((744 + 7)/8)

// Constants

#define MMC_GNSSECEF_ECEF_POS_LENGTH                                                     3
#define MMC_GNSSECEF_ECEF_VEL_LENGTH                                                     3
#define MMC_GNSSECEF_ECEF_POS_STD_LENGTH                                                 3
#define MMC_GNSSECEF_ECEF_VEL_STD_LENGTH                                                 3

typedef struct
{
    // FieldTypes
    uint32_t   devid;                         // bit len 32
    uint8_t    mode;                          // bit len 8
    uint8_t    fix_type;                      // bit len 8
    double     ecef_pos[3];                   // Static Array 64bit[3] max items
    float      ecef_vel[3];                   // Static Array 32bit[3] max items
    float      ecef_pos_std[3];               // Static Array 32bit[3] max items
    float      ecef_vel_std[3];               // Static Array 32bit[3] max items
    float      heading;                       // float32 Saturate
    float      heading_std;                   // float32 Saturate
    uint8_t    pos_sat;                       // bit len 8
    uint8_t    head_sat;                      // bit len 8
    uint8_t    pos_type;                      // bit len 8
    uint8_t    pos_sol;                       // bit len 8
    uint8_t    vel_type;                      // bit len 8
    uint8_t    vel_sol;                       // bit len 8
    uint8_t    head_type;                     // bit len 8
    uint8_t    head_sol;                      // bit len 8
    uint16_t   hdop;                          // bit len 16
    uint16_t   vdop;                          // bit len 16
    uavcan_Timestamp utc;                           //

} mmc_GnssEcef;

extern
uint32_t mmc_GnssEcef_encode(mmc_GnssEcef* source, void* msg_buf);

extern
int32_t mmc_GnssEcef_decode(const CanardRxTransfer* transfer, uint16_t payload_len, mmc_GnssEcef* dest, uint8_t** dyn_arr_buf);

extern
uint32_t mmc_GnssEcef_encode_internal(mmc_GnssEcef* source, void* msg_buf, uint32_t offset, uint8_t root_item);

extern
int32_t mmc_GnssEcef_decode_internal(const CanardRxTransfer* transfer, uint16_t payload_len, mmc_GnssEcef* dest, uint8_t** dyn_arr_buf, int32_t offset, uint8_t tao);

#ifdef __cplusplus
} // extern "C"
#endif

#define SOL_TYPE_SINGLE 			16
#define SOL_TYPE_NARROW_FLOAT		34
#define SOL_TYPE_NARROW_INT			50
#define SOL_STATUS_SOL_COMPUTED		0

bool get_gnss_updated(void);
void set_gnss_updated(void);
void send_gnss(void);

mmc_GnssEcef *get_gnss_ecef(void);
void update_heading(mmc_GnssEcef *gnss_ecef,const heading headingb);
void update_bestxyz(mmc_GnssEcef *gnss_ecef,const bestxyz bestxyzb);
void update_psrdop2(mmc_GnssEcef *gnss_ecef,const psrdop2 psrdop2b);
void update_timestamp(mmc_GnssEcef *gnss_ecef,const nova_time timeb);

#endif // __MMC_GNSSECEF
